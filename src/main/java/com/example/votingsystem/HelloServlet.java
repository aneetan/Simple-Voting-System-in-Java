package com.example.votingsystem;

import HashPassword.PasswordHashing;
import Model.VotingSystem;
import VotingService.VotingService;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

@WebServlet(name = "HelloServlet", urlPatterns = "/vote")
public class HelloServlet extends HttpServlet {
    private String message;

    public void init() {
        message = "Hello World!";
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setContentType("text/html");
        doPost(request, response);
    }


    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setContentType("text/html");
        String page = request.getParameter("page");

        //for registering new user
        if (page.equalsIgnoreCase("registerUser")) {
                VotingSystem votingSystem = new VotingSystem();

                votingSystem.setEmail(request.getParameter("email"));
                votingSystem.setDob(request.getParameter("dob"));
                votingSystem.setPassword(PasswordHashing.hashPassword(request.getParameter("password")));

                request.getSession().setAttribute("votingSystem", votingSystem);

                RequestDispatcher requestDispatcher = request.getRequestDispatcher("authorize.jsp");
                requestDispatcher.forward(request, response);
            }
        if (page.equalsIgnoreCase("authorizeUser")) {
            VotingSystem votingSystem = (VotingSystem) request.getSession().getAttribute("votingSystem");

            votingSystem.setEmail(request.getParameter("newEmail"));
            votingSystem.setDob(request.getParameter("newDob"));
            votingSystem.setPassword(request.getParameter("newPassword"));
            votingSystem.setFullName(request.getParameter("fullName"));
            votingSystem.setAddress(request.getParameter("address"));
            votingSystem.setGender(request.getParameter("gender"));
            votingSystem.setCitizenNo(request.getParameter("citizenNo"));
            votingSystem.setIssueDistrict(request.getParameter("issueDistrict"));
            votingSystem.setIssueDate(request.getParameter("issueDate"));

            // executing query with the value generated by form
            new VotingService().authorizeUser(votingSystem);

            RequestDispatcher requestDispatcher = request.getRequestDispatcher("index.jsp");
            requestDispatcher.forward(request, response);
        }

        //for login of user using result set from database
        if (page.equalsIgnoreCase("loginUser")) {
            String email = request.getParameter("email");
//            String password = PasswordHashing.hashPassword(request.getParameter("password"));
            String password = request.getParameter("password");


            //Admin login
            if(email.equalsIgnoreCase("admin@gmail.com") && password.equalsIgnoreCase("admin@123")){
                HttpSession session = request.getSession();
                session.setAttribute("email", email);
                RequestDispatcher requestDispatcher = request.getRequestDispatcher("adminDash.jsp");
                requestDispatcher.forward(request, response);
            } else {
                //User Login
                VotingSystem votingSystem = new VotingService().loginUser(email, password);

                if (votingSystem != null) {
                    HttpSession session = request.getSession();
                    session.setAttribute("email", email);

                    RequestDispatcher requestDispatcher = request.getRequestDispatcher("landing.jsp");
                    requestDispatcher.forward(request, response);
                } else {
                    request.setAttribute("errorMessage", "Invalid username or password");

                    RequestDispatcher requestDispatcher = request.getRequestDispatcher("index.jsp");
                    requestDispatcher.forward(request, response);
                }
            }
        }

        // for entering details to update password
        if (page.equalsIgnoreCase("forgotPassword")) {
            String citizenNo = request.getParameter("idNo");
            String issueDistrict = request.getParameter("issuedDistrict");

            VotingSystem votingSystem = new VotingService().forgotPw(citizenNo, issueDistrict);
            request.getSession().setAttribute("votingSystem", votingSystem);

            if (votingSystem != null) {
                RequestDispatcher requestDispatcher = request.getRequestDispatcher("resetpw.jsp");
                requestDispatcher.forward(request, response);
            } else {
                request.setAttribute("errorMessage", "Sorry incorrect details");

                RequestDispatcher requestDispatcher = request.getRequestDispatcher("forgotpw.jsp");
                requestDispatcher.forward(request, response);
            }
        }

        //for resetting the new password
        if (page.equalsIgnoreCase("newpw")) {
            VotingSystem votingSystem = (VotingSystem) request.getSession().getAttribute("votingSystem");

            int id = votingSystem.getId();
            String password = PasswordHashing.hashPassword(request.getParameter("confirmResetPw"));

            new VotingService().resetPw(id,password);

            RequestDispatcher requestDispatcher = request.getRequestDispatcher("index.jsp");
            requestDispatcher.forward(request, response);
        }

        //display register page
        if (page.equalsIgnoreCase("register")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("register.jsp");
            requestDispatcher.forward(request, response);
        }

        //display login page
        if (page.equalsIgnoreCase("login")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("index.jsp");
            requestDispatcher.forward(request, response);
        }

        //display forgot password page
        if (page.equalsIgnoreCase("forgotpw")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("forgotpw.jsp");
            requestDispatcher.forward(request, response);
        }

        //display admin dashboard
        if (page.equalsIgnoreCase("dashboard")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("adminDash.jsp");
            requestDispatcher.forward(request, response);
        }

        //display candidate list
        if (page.equalsIgnoreCase("seecandidate")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("candidatelist.jsp");
            requestDispatcher.forward(request, response);
        }

        //display add election form
        if (page.equalsIgnoreCase("addElection")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("addElection.jsp");
            requestDispatcher.forward(request, response);
        }

        //display add candidate form
        if (page.equalsIgnoreCase("addCandidate")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("addCandidate.jsp");
            requestDispatcher.forward(request, response);
        }

        //display add candidate form
        if (page.equalsIgnoreCase("userList")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("userlist.jsp");
            requestDispatcher.forward(request, response);
        }

        //display add candidate form
        if (page.equalsIgnoreCase("resultAdmin")) {
            RequestDispatcher requestDispatcher = request.getRequestDispatcher("resultAdmin.jsp");
            requestDispatcher.forward(request, response);
        }
    }

    public void destroy() {
    }
}